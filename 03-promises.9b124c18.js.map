{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAiBH,SAASC,cAAc,mBA4B9C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IApCWN,SAASC,cAAc,SAE/Ba,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAMC,iBAIN,IAHA,IAAMC,EAAaC,SAASnB,EAAWoB,OACjCC,EAAYF,SAAShB,EAAUiB,OAC/BE,EAAcH,SAASf,EAAegB,OACnCG,EAAI,EAAGA,EAAID,EAAaC,GAAK,EAAE,CAItClB,EAHsBkB,EAAI,EACNL,EAAaK,EAAIF,GAGlCG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACrBmB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAAK,CACzEuB,QAAO,K,IAGNC,OAAM,SAAAN,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACvBmB,EAAA5B,GAAS6B,OAAOK,QAAQ,sBAAqCH,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAAK,CACvEuB,QAAS,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst stepDelay = document.querySelector('[name=\"step\"]');\nconst promisesNumber = document.querySelector('[name=\"amount\"]');\nconst submitBtn = document.querySelector('.form');\n\nsubmitBtn.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n  const delayValue = parseInt(firstDelay.value);\n  const stepValue = parseInt(stepDelay.value);\n  const amountValue = parseInt(promisesNumber.value);\n  for (let i = 0; i < amountValue; i += 1){\n    const promiseNumber = i + 1;\n    const currentTime = delayValue + i * stepValue;\n\n    createPromise(promiseNumber, currentTime)\n      .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n    timeout: 7000,\n  },);\n  })\n      .catch(({ position, delay }) => {\n   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n    timeout: 7000,\n  },);\n  });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$stepDelay","$ce04d3a99e08e73b$var$promisesNumber","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayValue","parseInt","value","stepValue","amountValue","i","then","param","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure"],"version":3,"file":"03-promises.9b124c18.js.map"}